////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.4
//  \   \         Application : sch2hdl
//  /   /         Filename : SCPU_ctrl_drc.vf
// /___/   /\     Timestamp : 04/02/2019 16:49:34
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: E:\Xilinx\14.4\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -sympath H:/organization/lab6/OExp06-OwnSCPU/ipcore_dir -intstyle ise -family kintex7 -verilog SCPU_ctrl_drc.vf -w H:/organization/lab6/OExp06-OwnSCPU/SCPU_ctrl.sch
//Design Name: SCPU_ctrl
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module NOR6_HXILINX_SCPU_ctrl (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = !(I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale 1ns / 1ps

module SCPU_ctrl(ALU_Control, 
                 Fun, 
                 MIO_ready, 
                 OPcode, 
                 ALUSrc_B, 
                 Branch, 
                 CPU_MIO, 
                 Jump, 
                 MemtoReg, 
                 mem_w, 
                 RegDst, 
                 RegWrite);

    input [2:0] ALU_Control;
    input [5:0] Fun;
    input MIO_ready;
    input [5:0] OPcode;
   output ALUSrc_B;
   output Branch;
   output CPU_MIO;
   output Jump;
   output MemtoReg;
   output mem_w;
   output RegDst;
   output RegWrite;
   
   wire ALUop0;
   wire ALUop1;
   wire XLXN_49;
   wire XLXN_53;
   wire XLXN_57;
   wire Branch_DUMMY;
   wire RegDst_DUMMY;
   wire mem_w_DUMMY;
   wire MemtoReg_DUMMY;
   wire [2:0] ALU_Control_DUMMY;
   
   assign Branch = Branch_DUMMY;
   assign MemtoReg = MemtoReg_DUMMY;
   assign mem_w = mem_w_DUMMY;
   assign RegDst = RegDst_DUMMY;
   assign ALU_Control_DUMMY[2:0] = ALU_Control[2:0];
   (* HU_SET = "XLXI_2_0" *) 
   NOR6_HXILINX_SCPU_ctrl  XLXI_2 (.I0(OPcode[5]), 
                                  .I1(OPcode[4]), 
                                  .I2(OPcode[3]), 
                                  .I3(OPcode[2]), 
                                  .I4(OPcode[1]), 
                                  .I5(OPcode[0]), 
                                  .O(RegDst_DUMMY));
   AND5B2  XLXI_3 (.I0(OPcode[3]), 
                  .I1(OPcode[2]), 
                  .I2(OPcode[1]), 
                  .I3(OPcode[0]), 
                  .I4(OPcode[5]), 
                  .O(MemtoReg_DUMMY));
   AND5B1  XLXI_4 (.I0(OPcode[2]), 
                  .I1(OPcode[5]), 
                  .I2(OPcode[3]), 
                  .I3(OPcode[1]), 
                  .I4(OPcode[0]), 
                  .O(mem_w_DUMMY));
   AND5B4  XLXI_5 (.I0(OPcode[5]), 
                  .I1(OPcode[3]), 
                  .I2(OPcode[1]), 
                  .I3(OPcode[0]), 
                  .I4(OPcode[2]), 
                  .O(Branch_DUMMY));
   AND5B4  XLXI_6 (.I0(OPcode[5]), 
                  .I1(OPcode[3]), 
                  .I2(OPcode[2]), 
                  .I3(OPcode[0]), 
                  .I4(OPcode[1]), 
                  .O(Jump));
   OR2  XLXI_7 (.I0(RegDst_DUMMY), 
               .I1(MemtoReg_DUMMY), 
               .O(RegWrite));
   OR2  XLXI_8 (.I0(mem_w_DUMMY), 
               .I1(MemtoReg_DUMMY), 
               .O(ALUSrc_B));
   BUF  XLXI_9 (.I(RegDst_DUMMY), 
               .O(ALUop1));
   BUF  XLXI_10 (.I(Branch_DUMMY), 
                .O(ALUop0));
   AND2  XLXI_11 (.I0(Fun[1]), 
                 .I1(ALUop1), 
                 .O(XLXN_53));
   AND2B1  XLXI_12 (.I0(Fun[1]), 
                   .I1(Fun[0]), 
                   .O(XLXN_57));
   OR2  XLXI_13 (.I0(Fun[3]), 
                .I1(XLXN_57), 
                .O(XLXN_49));
   AND2  XLXI_14 (.I0(XLXN_49), 
                 .I1(ALUop1), 
                 .O(ALU_Control_DUMMY[0]));
   NAND2  XLXI_15 (.I0(Fun[2]), 
                  .I1(ALUop1), 
                  .O(ALU_Control_DUMMY[1]));
   OR2  XLXI_16 (.I0(XLXN_53), 
                .I1(ALUop0), 
                .O(ALU_Control_DUMMY[2]));
endmodule
